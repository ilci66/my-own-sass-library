@use "sass:math";

$grid-columns: 12;

// base layout classes
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
}
.row {
  display: flex;
  // this will push them below if they don't fit 
  flex-flow: row wrap;
}
// grid gaps
@each $key, $val in $grid-gaps {
    // this means immediate descendants of the given element
    .gap-#{$key} > * {
      padding: $val;
    }
    .gap-#{$key} {
      margin-left: -$val;
      margin-right: -$val;
    }
  }
  
  // justify content classes
  @each $val in $layout-values {
    .justify-#{$val} {
      justify-content: $val;
    }
  }
  
// col classes
// @content comes into play here, becomes whatever is inside the curly braces
@include xs {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xs {
      box-sizing: border-box;
      // prevent growing 
      flex-grow: 0;
      // this is calculated like this ==> width : (i * 100%) / 12
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include sm {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include md {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include lg {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include xl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}